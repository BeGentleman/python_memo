# 什么是装饰器？
# 想要增强一个函数的功能，却又不想修改函数本身的定义，
# 这种在代码运行期间动态增加功能的方式，叫做装饰器（decorator）

# 装饰器有什么作用？
# 避免与函数功能本身无关的了雷同代码出现。

# 装饰器有什么显著的应用实例？
# 经典如：插入日志，性能测试，flask中route等等

# 装饰器怎么用？
# 实际顺序是：第一步->第二步->第三步->第四步
# 但为了程序能够正常执行，我把顺序写为：第二步->第三步->第一步->第四步

# 第二步： 要给函数增强什么功能，就另外定义一个新的函数，然后给新函数一个参数func，
#          表示传递一个函数进入这个新函数中。一般都会接着在新函数中定义一个wrapper函数。
#          然后在wrapper中调用需要被增强的函数。
def xinhanshu(func):
    def wrapper():
        func()
        print("我是装饰器")
    return wrapper

@xinhanshu# 第三步：在需要增强的函数上加上"@"和"装饰器函数的名字"xinhanshu。
def yuanhanshu():# 第一步：首先要有一个要被增强的函数
    print("我是原函数")

yuanhanshu()# 第四步：执行原函数，就会输出原函数本身的内容和装饰器中的内容

# 输出
# 我是原函数
# 我是装饰器


闭包
将函数当作参数传入另一个函数中这种方式叫做闭包
闭包的作用

闭包的结构
外部函数（参数即函数）
    内部函数

调用

类方法
