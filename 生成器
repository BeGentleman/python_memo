0x00 什么是生成器？
     生成器是用来创建数据序列的一种对象，写作generator

0x01 生成器有什么作用？
     生成器是为了迭代器产生数据的，考虑到列表所有的数据都存储在内存当中，如果我们只用列表当中的几个元素的时候，会造成内存资源的浪费
     这样就产生了一种用到元素的情况下，再生成元素的方式，这个方式就是生成器。
     总结：既可以生成庞大的数据，又可以节约内存占用。
     
0x02 生成器的工作原理：
     生成器之所以能够迭代，是因为有一个next()方法，工作原理就是不断的调用这个next()方法，直到捕获一个异常。
     一般直接使用for循环来迭代。
     当程序语句走到yield的时候，程序会停在yeild处，然后在下一次迭代时，从yield下一条语句开始执行。
     有时我们在迭代的时候，需要迭代一个特定的值，这个时候我们需要直接传递一个值进入函数中，用send()函数。
     
0x03 生成器的写法：
     有两种方法：
               方法一：
                      直接将列表的[]变成()，就能将一个列表
               方法二：
                      yeild关键字，当一个函数有了yeild关键字以后，函数就会变成一个生成器对象


      举例说明：
          首先是不用yeild关键字：
               # 这个不是生成器，只是一个列表。
               >>> list1 = [1,2,3,4,5]
               >>> print(list1)
               [1, 2, 3, 4, 5]
               >>> 
               # 列表没有next方法，否则会报错。
               >>> print(list1.next())
               Traceback (most recent call last):
                 File "<pyshell#34>", line 1, in <module>
                   print(list1.next())
               AttributeError: 'list' object has no attribute 'next'
               
               # 这个也不是生成器，是一个元组。
               >>> list2 = (1,2,3,4,5)
               >>> print(list2)
               (1, 2, 3, 4, 5)
               >>>
               # 元组没有next方法，否则会报错。
               >>> print(list2.next())
               Traceback (most recent call last):
                 File "<pyshell#7>", line 1, in <module>
                   print(list2.next())
               AttributeError: 'tuple' object has no attribute 'next'

               # 这个是生成器
               >>> list4 = (i for i in range(1,10))
               # 直接输出会输出一个生成器对象
               >>> print(list4)
               <generator object <genexpr> at 0x000001BBF2BC94C8>
               
               # 想要输出生成器当中的元素，需要使用next()方法，写法分为两种，
                 第一种：next(生成器对象)
                 第二种：生成器对象.__next__()
               
               # 直接写生成器.next()这种情况是不正确的。
               >>> print(list4.next())
               Traceback (most recent call last):
                 File "<pyshell#16>", line 1, in <module>
                   print(list4.next())
               AttributeError: 'generator' object has no attribute 'next'
               # 直接用next()而不传入参数值也是不正确的。
               >>> print(next())
               Traceback (most recent call last):
                 File "<pyshell#17>", line 1, in <module>
                   print(next())
               TypeError: next expected at least 1 arguments, got 0
               # 可以将生成器全部转换为列表并输出。
               >>> print(list(list4))
               [1, 2, 3, 4, 5, 6, 7, 8, 9]
               # 生成器.__next__这种方法如果不加(),就不是next方法，会报出如下错误。
               >>> print(list4.__next__)
               <method-wrapper '__next__' of generator object at 0x000001BBF2BC94C8>
               # 生成器.__nexr__()这中方法正确，但是生成器中已经没有可以继续迭代的元素了，也会报错，说StopIteration
               >>> print(list4.__next__())
               Traceback (most recent call last):
                 File "<pyshell#21>", line 1, in <module>
                   print(list4.__next__())
               StopIteration
               # 同样, next(生成器)这种方式写法也是正确的，但是生成器中已经没有可以迭代的对象了，同样会报StopIteration错误。
               >>> print(next(list4))
               Traceback (most recent call last):
                 File "<pyshell#22>", line 1, in <module>
                   print(next(list4))
               StopIteration
               
               # 以下为正常情况下生成器的输出。
               >>> list5 = (i for i in range(0,20))
               >>> print(list5.__next__())
               0
               >>> print(list5.__next__())
               1
               >>> print(next(list5))
               2
               >>> print(next(list5))
               3
               >>> 
               
          然后是用yeild关键字：
               import sys

               # 生成器
               def fab(max):
                   n, a, b = 0, 0, 1
                   while True:
                       if n >= max:
                           return     
                       yield a
                       a, b = b, a+b
                       n += 1
               f = fab(5)

               while True:
                   try:
                       print(next(f), end=" ")
                   except:
                       sys.exit()


               # 输出：
               0 1 1 2 3
0x04 使用生成器的案例：

     

